"""
The sequence of triangle numbers is generated by adding
the natural numbers. So the 7th triangle number would
be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number
to have over five hundred divisors?
""" #76576500!


#input as xth tri number, returns term value
def getTriangularNumber(nthTriNum):
    value = 0
    for triNum in range(1, nthTriNum+1):
        value += triNum
    return value

#gets all divisors from term and put into a list
def getDivisors(number):
    divCount = 0
    if number % 2 == 0:
        for div in range(1, int(number**0.5)+1):
            if number % div == 0:
                divCount+=2
                if div*div == number: divCount-1
    else:
        for div in range(1, int(number**0.5)+1,2):
            if number % div == 0:
                divCount+=2
                if div*div == number: divCount-1
    return divCount

#input number as x >= divisors, returns triangular number which has
def start(x): #start at 0
    num = 0
    count = 0
    while count <= x:
        num+=1
        term = getTriangularNumber(num)
        count = getDivisors(term)
    return term
    
